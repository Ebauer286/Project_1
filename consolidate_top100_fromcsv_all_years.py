# consolidate_top100() takes in a csv file containing all songs from one year, and returns a DataFrame with the 100 most recurring songs.

def consolidate_top100_fromcsv_add_year(x):
    # converting raw list of dictionaries into a pandas dataframe.
    # this requires a list with a specific formatting, generated by convert_year_list_to_simple_list()
    # df1 = pd.DataFrame(x)
    df1 = x
    # remove data column. Rows with the same song title and artist are made unique by date.

    date_list = df1["date"].to_list()
    new_date_list = []
    for i in date_list:
        date_format = '%Y-%m-%d'
        year_value = datetime.datetime.strptime(i, date_format).year
        new_date_list.append(year_value)

    df2 = df1.assign(year=new_date_list)

    df2 = df2.drop(["date", "rank", "image", "weeks at no.1", "last week", "peak position", "weeks on chart", "detail"],
                   axis=1)

    # using the pandas pivot_table() function to get a count of song titles
    # the pivot table is converted into a new DataFrame.
    df3 = pd.DataFrame(df2.pivot_table(index=["title"], aggfunc='size'))

    # create a new DataFrame by merging df2 and df3, to combine track info with the associated count.
    # remove lines with NaN values
    # remove duplicate rows (https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html)
    # https://pandas.pydata.org/docs/user_guide/merging.html
    df4 = pd.merge(df3, df2, how="left", on="title").dropna().drop_duplicates(
        subset=["title"])  # https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html

    # sorting the DataFrame by count in descending order (https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html)
    # reordering columns for csv readability
    df4 = df4.sort_values(by=[0], ascending=False)
    # df4 = df4.iloc[:,[3,0,2,1]]
    df4 = df4.rename(columns={0: "count"})  # https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html
    df4 = df4.loc[:, ["title", "artist", "count", "year"]]

    # creating a new DataFrame that is 100 songs with the greatest count value
    # https://stackoverflow.com/questions/12021754/how-to-slice-a-pandas-dataframe-by-position
    final_df = df4.head(100).reset_index(
        drop=True)  # https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reset_index.html

    # getting 'year' value from DataFrame to apply a distinguishing element to the outputted .csv
    # https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    # year = str(final_df.iloc[0,0])
    path = r"C:\Users\kevin\bootcamp\Project_1\resources\most_frequent_hot100songs_by_year"
    # final_df.to_csv(os.path.join(path,f"top100_{year}.csv")) #https://stackoverflow.com/questions/22872952/set-file-path-for-to-csv-in-pandas
    final_df.to_csv(os.path.join(path,
                                 f"top100_{new_date_list[0]}.csv"))  # https://stackoverflow.com/questions/22872952/set-file-path-for-to-csv-in-pandas

    return final_df


